---
title: "Initial FLUXNET Plots"
author: 
  - Kristina Riemer
  - Dave Moore
  - name: Eric R. Scott
    orcid: 0000-0002-7430-7879
date: today
format:
  html:
    toc: true
    toc-expand: 2
    toc-location: left
    css: styles.css
    code-fold: true
execute: 
  warning: false
---

## TODO list

- Data
  - Download data for more sites
  - Automated checking of data ranges? 
- Plots
  - Scale by number of years for each date
  - Do all initial plots
  - Change IGBP codes to definitions
  - Add overall trend line to interannual met variability plots
  - Facet all figures for interannual met variability


```{r}
#| eval: false
# Need dev version of `amerifluxr` package to get `amf_download_fluxnet` function.
pak::pak("chuhousen/amerifluxr")
pak::pak("valentinitnelav/plotbiomes")
```


```{r}
#| label: setup
#| output: false

library(dplyr)
library(lubridate)
library(ggplot2)
library(amerifluxr)
library(stringr)
library(readr)
library(purrr)
library(tidyr)
library(plotbiomes)
library(measurements)
library(ggnewscale)
library(fs)
library(geomtextpath)
library(ggtext) #for subscripts in axis labels
library(ggforce) #for convex hulls in bowen ratios plot

#source data loading functions
source("R/fcn_utility_FLUXNET.R")

#set default ggplot2 theme
theme_set(theme_classic() + theme(axis.title = element_markdown()))
```

```{r}
#| label: load-data
site_metadata <- load_fluxnet_metadata()
fluxnet_annual <- load_and_clean_annual_data(site_metadata)
fluxnet_daily <- load_and_clean_daily_data(site_metadata)
```

```{r}
#| label: plot-labs

#set up all the possible plot labels as objects for easy reference.  These get formatted by `marquee`

lab_precip_annual <- "Precipitation (mm y<sup>-1</sup>)"
lab_gpp_daily <- "GPP (g C m<sup>-2</sup> d<sup>-1</sup>)"
lab_nee_daily <- "NEE (g C m<sup>-2</sup> d<sup>-1</sup>)"
lab_reco_daily <- "RECO (g C m<sup>-2</sup> d<sup>-1</sup>)"
lab_gpp_annual <- "GPP (g C m<sup>-2</sup> yr<sup>-1</sup>)"
lab_nee_annual <- "NEE (g C m<sup>-2</sup> yr<sup>-1</sup>)"
lab_reco_annual <- "RECO (g C m<sup>-2</sup> yr<sup>-1</sup>)"
```

## QA/QC

2 sites have annual precip > 6000mmâ€”that's gotta be an error

```{r}
fluxnet_annual <- fluxnet_annual |> filter(P_F < 6000)
```

## Figures

Find all variables described on the [FULLSET Data Product page](https://fluxnet.org/data/fluxnet2015-dataset/fullset-data-product/). Plots are generally of 3 variables: 

1. GPP_NT_VUT_REF
2. RECO_NT_VUT_REF
3. NEE_VUT_REF

### Entire time series (single site)

Lots of ways to smooth time series (i.e., filter)

- Simple running mean from [this book chapter](https://cswr.nrhstat.org/timeseries)
- Takes mean of value and (n-1) / 2 values on either side of it
- Bigger window size = more averaging

```{r}
window_size <- 51
```

```{r}
#| code-fold: true
#| warning: false

total_ts_gpp <- fluxnet_daily %>%
  filter(site == first(site)) |>
  mutate(
    running_mean_gpp = stats::filter(
      GPP_NT_VUT_REF,
      rep(1 / window_size, window_size)
    )
  )

yr_start_dates <- total_ts_gpp %>%
  filter(grepl("-01-01", date_object)) %>%
  pull(date_object)

ggplot(total_ts_gpp, aes(x = date_object, y = GPP_NT_VUT_REF)) +
  geom_point(size = 0.5, color = "darkgrey") +
  geom_line(aes(y = running_mean_gpp), color = "blue", lwd = 1) +
  geom_vline(xintercept = yr_start_dates, color = "grey", alpha = 0.5) +
  labs(x = "Date", y = lab_gpp_daily)

total_ts_reco <- fluxnet_daily %>%
  filter(site == first(site)) |>
  mutate(
    running_mean_reco = stats::filter(
      RECO_NT_VUT_REF,
      rep(1 / window_size, window_size)
    )
  )

ggplot(total_ts_reco, aes(x = date_object, y = RECO_NT_VUT_REF)) +
  geom_point(size = 0.5, color = "darkgrey") +
  geom_line(aes(y = running_mean_reco), color = "blue", lwd = 1) +
  geom_vline(xintercept = yr_start_dates, color = "grey", alpha = 0.5) +
  labs(x = "Date", y = lab_reco_daily)

total_ts_nee <- fluxnet_daily %>%
  filter(site == first(site)) |>
  mutate(
    running_mean_nee = stats::filter(
      NEE_VUT_REF,
      rep(1 / window_size, window_size)
    )
  )

ggplot(total_ts_nee, aes(x = date_object, y = NEE_VUT_REF)) +
  geom_point(size = 0.5, color = "darkgrey") +
  geom_line(aes(y = running_mean_nee), color = "blue", lwd = 1) +
  geom_vline(xintercept = yr_start_dates, color = "grey", alpha = 0.5) +
  labs(x = "Date", y = lab_nee_daily)
```

### Entire time series (multiple sites)

Same smoother as used for single site. 

```{r}
#| warning: false
total_ts_ms <- fluxnet_daily %>%
  group_by(site) %>%
  mutate(
    running_mean_gpp = stats::filter(
      GPP_NT_VUT_REF,
      rep(1 / window_size, window_size)
    ),
    running_mean_reco = stats::filter(
      RECO_NT_VUT_REF,
      rep(1 / window_size, window_size)
    ),
    running_mean_nee = stats::filter(
      NEE_VUT_REF,
      rep(1 / window_size, window_size)
    )
  )

yr_start_dates_ms <- total_ts_ms %>%
  filter(grepl("-01-01", date_object)) %>%
  pull(date_object)
```

Show entire time series of GPP for all sites, with points for daily values.

```{r}
#| code-fold: true
#| warning: false

ggplot(
  total_ts_ms,
  aes(
    x = date_object,
    y = GPP_NT_VUT_REF,
    color = COUNTRY,
    fill = COUNTRY,
    group = site
  )
) +
  geom_point(size = 0.1, alpha = 0.1, key_glyph = draw_key_rect) +
  geom_vline(xintercept = yr_start_dates_ms, color = "grey", alpha = 0.5) +
  geom_hline(yintercept = 0, color = "grey", alpha = 0.5, linetype = "dashed") +
  facet_grid(vars(IGBP)) +
  guides(colour = guide_legend(override.aes = list(alpha = 1))) +
  labs(x = "Date", y = lab_gpp_daily) +
  theme(panel.background = element_rect(color = "black"))

ggplot(
  total_ts_ms,
  aes(
    x = date_object,
    y = RECO_NT_VUT_REF,
    color = COUNTRY,
    fill = COUNTRY,
    group = site
  )
) +
  geom_point(size = 0.1, alpha = 0.1, key_glyph = draw_key_rect) +
  geom_vline(xintercept = yr_start_dates_ms, color = "grey", alpha = 0.5) +
  geom_hline(yintercept = 0, color = "grey", alpha = 0.5, linetype = "dashed") +
  facet_grid(vars(IGBP)) +
  guides(colour = guide_legend(override.aes = list(alpha = 1))) +
  labs(x = "Date", y = lab_reco_daily) +
  theme(panel.background = element_rect(color = "black"))

ggplot(
  total_ts_ms,
  aes(
    x = date_object,
    y = NEE_VUT_REF,
    color = COUNTRY,
    fill = COUNTRY,
    group = site
  )
) +
  geom_point(size = 0.1, alpha = 0.1, key_glyph = draw_key_rect) +
  geom_vline(xintercept = yr_start_dates_ms, color = "grey", alpha = 0.5) +
  geom_hline(yintercept = 0, color = "grey", alpha = 0.5, linetype = "dashed") +
  facet_grid(vars(IGBP)) +
  guides(colour = guide_legend(override.aes = list(alpha = 1))) +
  labs(x = "Date", y = lab_nee_daily) +
  theme(panel.background = element_rect(color = "black"))
```

Show entire time series of GPP for all sites, with daily values smoothed out as a line. 
```{r}
#| code-fold: true
#| warning: false

ggplot(
  total_ts_ms,
  aes(x = date_object, y = running_mean_gpp, color = COUNTRY, group = site)
) +
  geom_line(lwd = 0.5, alpha = 0.7) +
  geom_vline(xintercept = yr_start_dates_ms, color = "grey", alpha = 0.5) +
  geom_hline(yintercept = 0, color = "grey", alpha = 0.5, linetype = "dashed") +
  facet_grid(vars(IGBP)) +
  labs(x = "Date", y = lab_gpp_daily) +
  theme(panel.background = element_rect(color = "black"))

ggplot(
  total_ts_ms,
  aes(x = date_object, y = running_mean_reco, color = COUNTRY, group = site)
) +
  geom_line(lwd = 0.5, alpha = 0.7) +
  geom_vline(xintercept = yr_start_dates_ms, color = "grey", alpha = 0.5) +
  geom_hline(yintercept = 0, color = "grey", alpha = 0.5, linetype = "dashed") +
  facet_grid(vars(IGBP)) +
  labs(x = "Date", y = lab_reco_daily) +
  theme(panel.background = element_rect(color = "black"))

ggplot(
  total_ts_ms,
  aes(x = date_object, y = running_mean_nee, color = COUNTRY, group = site)
) +
  geom_line(lwd = 0.5, alpha = 0.7) +
  geom_vline(xintercept = yr_start_dates_ms, color = "grey", alpha = 0.5) +
  geom_hline(yintercept = 0, color = "grey", alpha = 0.5, linetype = "dashed") +
  facet_grid(vars(IGBP)) +
  labs(x = "Date", y = lab_nee_daily) +
  theme(panel.background = element_rect(color = "black"))
```

### Average annual time series (single site)

Show average daily values (with standard deviations)

```{r}
#| code-fold: true

# get averages by date across years
gpp_by_date <- fluxnet_daily %>%
  filter(site == first(site)) |>
  mutate(date_minus_year = format(date_object, '%m-%d')) %>%
  group_by(date_minus_year) %>%
  summarize(gpp_mean = mean(GPP_NT_VUT_REF), gpp_sd = sd(GPP_NT_VUT_REF)) %>%
  mutate(date_fake_year = ymd(paste0("2024-", date_minus_year)))

ggplot(gpp_by_date, aes(x = date_fake_year, y = gpp_mean)) +
  geom_ribbon(
    aes(ymax = gpp_mean + gpp_sd, ymin = gpp_mean - gpp_sd),
    fill = "grey"
  ) +
  geom_point() +
  labs(
    x = "Date",
    # y = "Mean GPP +/- SD"
    y = lab_gpp_daily
  ) +
  # theme_minimal() +
  scale_x_date(date_labels = "%B")

reco_by_date <- fluxnet_daily %>%
  filter(site == first(site)) |>
  mutate(date_minus_year = format(date_object, '%m-%d')) %>%
  group_by(date_minus_year) %>%
  summarize(
    reco_mean = mean(RECO_NT_VUT_REF),
    reco_sd = sd(RECO_NT_VUT_REF)
  ) %>%
  mutate(date_fake_year = ymd(paste0("2024-", date_minus_year)))

ggplot(reco_by_date, aes(x = date_fake_year, y = reco_mean)) +
  geom_ribbon(
    aes(ymax = reco_mean + reco_sd, ymin = reco_mean - reco_sd),
    fill = "grey"
  ) +
  geom_point() +
  labs(
    x = "Date",
    # y = "Mean RECO +/- SD"
    y = lab_reco_daily
  ) +
  # theme_minimal() +
  scale_x_date(date_labels = "%B")

nee_by_date <- fluxnet_daily %>%
  filter(site == first(site)) |>
  mutate(date_minus_year = format(date_object, '%m-%d')) %>%
  group_by(date_minus_year) %>%
  summarize(nee_mean = mean(NEE_VUT_REF), nee_sd = sd(NEE_VUT_REF)) %>%
  mutate(date_fake_year = ymd(paste0("2024-", date_minus_year)))

ggplot(nee_by_date, aes(x = date_fake_year, y = nee_mean)) +
  geom_ribbon(
    aes(ymax = nee_mean + nee_sd, ymin = nee_mean - nee_sd),
    fill = "grey"
  ) +
  geom_point() +
  labs(
    x = "Date",
    # y = "Mean NEE +/- SD"
    y = lab_nee_daily
  ) +
  # theme_minimal() +
  scale_x_date(date_labels = "%B")

```

### Average annual time series (multiple sites)

Textbook figures: 

![](textbook_figures/seasonal_gpp_nee.png)

Show average daily values by site (symbols) and vegetation type (colors)

```{r}
#| code-fold: true
#| warning: false

gpp_by_date_sites <- fluxnet_daily %>%
  mutate(date_minus_year = format(date_object, '%m-%d')) %>%
  group_by(site, date_minus_year) %>%
  summarize(
    gpp_mean = mean(GPP_NT_VUT_REF),
    gpp_sd = sd(GPP_NT_VUT_REF),
    reco_mean = mean(RECO_NT_VUT_REF),
    reco_sd = sd(RECO_NT_VUT_REF),
    nee_mean = mean(NEE_VUT_REF),
    nee_sd = sd(NEE_VUT_REF)
  ) %>%
  mutate(date_fake_year = ymd(paste0("2024-", date_minus_year))) %>%
  left_join(site_metadata, by = c("site" = "SITE_ID"))

gpp_by_date_sites |>
  group_by(COUNTRY) |>
  #some countries have no data
  filter(!all(is.na(gpp_mean))) |>
  ggplot(aes(x = date_fake_year, y = gpp_mean)) +
  facet_wrap(vars(COUNTRY)) +
  geom_point(aes(color = IGBP)) +
  scale_x_date(date_labels = "%B") +
  labs(x = "Date", y = lab_gpp_daily) +
  theme_minimal() +
  theme(axis.title = element_markdown())

gpp_by_date_sites |>
  group_by(COUNTRY) |>
  filter(!all(is.na(reco_mean))) |>
  ggplot(aes(x = date_fake_year, y = reco_mean)) +
  facet_wrap(vars(COUNTRY)) +
  geom_point(aes(color = IGBP)) +
  labs(x = "Date", y = lab_reco_daily) +
  scale_x_date(date_labels = "%B") +
  theme_minimal() +
  theme(axis.title = element_markdown())

gpp_by_date_sites |>
  group_by(COUNTRY) |>
  filter(!all(is.na(nee_mean))) |>
  ggplot(aes(x = date_fake_year, y = nee_mean)) +
  facet_wrap(vars(COUNTRY)) +
  geom_point(aes(color = IGBP)) +
  scale_x_date(date_labels = "%B") +
  labs(x = "Date", y = lab_nee_daily) +
  theme_minimal() +
  theme(axis.title = element_markdown())

```

### Comparison to meteorological variables (multiple sites)

Textbook figure (for NEE): 

![](textbook_figures/meteo_comp.png)

Meteorological variables (bold indicates variable in figures): 

1. P: Precipitation - not in annual datasets
2. P_ERA: Precipitation, downscaled from ERA, linearly regressed using measured only site data
3. **P_F**: Precipitation consolidated from P and P_ERA
4. TA_F_MDS: Air temperature, gapfilled using MDS method
5. TA_ERA: Air temperature, downscaled from ERA, linearly regressed using measured only site data
6. **TA_F**: Air temperature, consolidated from TA_F_MDS and TA_ERA

Show annual precipitation, summed from daily data, against three main variables annually. 

```{r}
#| code-fold: true
#| warning: false

fluxnet_annual |>
  filter(!is.na(GPP_NT_VUT_REF)) |>
  ggplot(aes(x = P_F, y = GPP_NT_VUT_REF)) +
  geom_point(aes(color = COUNTRY, group = site)) +
  geom_smooth(se = FALSE, color = "black") +
  labs(x = lab_precip_annual, y = lab_gpp_annual)

fluxnet_annual |>
  filter(!is.na(RECO_NT_VUT_REF)) |>
  ggplot(aes(x = P_F, y = RECO_NT_VUT_REF)) +
  geom_point(aes(color = COUNTRY, group = site)) +
  geom_smooth(se = FALSE, color = "black") +
  labs(x = lab_precip_annual, y = lab_reco_annual)

fluxnet_annual |>
  filter(!is.na(NEE_VUT_REF)) |>
  ggplot(aes(x = P_F, y = NEE_VUT_REF)) +
  geom_point(aes(color = COUNTRY, group = site)) +
  geom_smooth(se = FALSE, color = "black") +
  labs(x = lab_precip_annual, y = lab_nee_annual)
```

Show annual temperature, averaged from daily data, against three main variables annually. 

```{r}
#| code-fold: true
#| warning: false

fluxnet_annual |>
  ggplot(aes(x = TA_F, y = GPP_NT_VUT_REF)) +
  geom_smooth(se = FALSE, color = "black") +
  geom_point(aes(color = COUNTRY, group = site)) +
  labs(x = "Temperature (ÂºC)", y = lab_gpp_annual)

fluxnet_annual |>
  ggplot(aes(x = TA_F, y = RECO_NT_VUT_REF)) +
  geom_smooth(se = FALSE, color = "black") +
  geom_point(aes(color = COUNTRY, group = site)) +
  labs(x = "Temperature (ÂºC)", y = lab_reco_annual)

fluxnet_annual |>
  ggplot(aes(x = TA_F, y = NEE_VUT_REF)) +
  geom_smooth(se = FALSE, color = "black") +
  geom_point(aes(color = COUNTRY, group = site)) +
  labs(x = "Temperature (ÂºC)", y = lab_nee_annual)
```

::: {.callout-tip}
## Questions

1. We want to do this for evapotranspiration; which variable is that in the dataset? 
2. Do precipitation variable P and temp variable TA_F_MDS come from measured site data? 
3. We could get some measure of variability for x- (temp and precip) and y- (GPP, RECO, NEE) axes by using the daily or monthly values instead; would that be of interest? 
:::

### Interannual comparison to meteorological variables (multiple sites)

Textbook figure (for NPP): 

![](textbook_figures/interannual_meteo_comp.png)

```{r}
#TODO: use precip instead of temp

ggplot(fluxnet_annual, aes(x = P_F, y = GPP_NT_VUT_REF)) +
  geom_smooth(se = FALSE, color = "black", linewidth = 0.5) +
  # geom_smooth(se = FALSE, aes(color = site), method = "lm") +
  geom_textsmooth(
    aes(color = IGBP, label = IGBP),
    se = FALSE,
    method = "lm",
    offset = unit(5, "pt"),
    gap = FALSE,
    textcolor = "black",
    size = 3
  ) +
  labs(x = lab_precip_annual, y = lab_gpp_annual) +
  guides(color = "none")
```

### Bowen ratios

Textbook figure: 

![](textbook_figures/bowen_ratios.png)

Heat flux variables (bold indicates variable in figures): 

- **H_F_MDS**: Sensible heat flux, gapfilled using MDS method (W m-2)
- H_CORR (H_CORR_25, H_CORR_75): Sensible heat flux, corrected H_F_MDS by energy balance closure correction factor (25th and 75th percentile) 
- **LE_F_MDS**: Latent heat flux, gapfilled using MDS method
- LE_CORR (LE_CORR_25, LE_CORR_75): Latent heat flux, corrected LE_F_MDS by energy balance closure correction factor (25th and 75th percentile) 


Visual check of heat flux variable ranges. 
```{r}
#| message: false
ggplot(fluxnet_daily, aes(x = LE_F_MDS)) +
  geom_histogram() +
  facet_wrap(~site) +
  theme_bw()

ggplot(fluxnet_daily, aes(x = H_F_MDS)) +
  geom_histogram() +
  facet_wrap(~site) +
  theme_bw()
```

Show average daily summer-only sensible vs latent heat flux (i.e., Bowen ratio) for multiple sites with different vegetation types. Bowen ratios of 3, 2, 1, 0.5, and 0.25 shown by dotted lines. 

```{r}
#| code-fold: true

multiple_sites_flux <- fluxnet_daily %>%
  filter(month(date_object) %in% c(6:8)) %>% #filter to include summer only
  group_by(site, IGBP) %>%
  summarize(
    latent_heat_flux = mean(LE_F_MDS),
    sensible_heat_flux = mean(H_F_MDS)
  )

upper_axis_limit <- pmax(
  max(multiple_sites_flux$sensible_heat_flux),
  max(multiple_sites_flux$latent_heat_flux)
) +
  10

ggplot(
  multiple_sites_flux,
  aes(x = latent_heat_flux, y = sensible_heat_flux, color = IGBP)
) +
  geom_point(size = 3) +
  # geom_mark_hull(expand = unit(1, "mm")) + #looks ridiculous
  geom_mark_ellipse(
    aes(
      label = IGBP,
      fill = IGBP,
      filter = IGBP %in% c("OSH", "CRO", "DBF") #highlight just a few?
    ),
    label.fill = "inherit"
  ) +
  geom_abline(
    slope = c(0.25, 0.5, 1, 2, 3),
    linetype = "dotted",
    color = "darkgrey"
  ) +
  scale_x_continuous(expand = c(0, 0), limits = c(0, upper_axis_limit)) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, upper_axis_limit)) +
  # guides(x.sec = "axis", y.sec = "axis") +
  guides(fill = "none") +
  labs(
    x = "Latent Heat Flux (W m<sup>-2</sup>)",
    y = "Sensible Heat Flux (W m<sup>-2</sup>)"
  ) +
  theme(
    panel.border = element_rect(fill = NA),
    axis.title = element_markdown(),
    # axis.ticks.x.top = element_blank(),
    # axis.text.x.top = element_blank(),
    # axis.ticks.y.right = element_blank(),
    # axis.text.y.right = element_blank()
  )


```

::: {.callout-tip}
## Questions

1. Should watts be converted to megajoules for the heat flux variables? *No, people will be more likely to expect Wm-2*
2. Are heat flux values expected to be negative, especially for sensible heat flux? 
:::

### Biome plot

Textbook figure: 

![](textbook_figures/biomes.png)

The R package [`plotbiomes`](https://github.com/valentinitnelav/plotbiomes) can be used to recreate the base plot here, which is referred to as a [Whittaker plot](https://en.wikipedia.org/wiki/Biome#Whittaker_(1962,_1970,_1975)_biome-types). It includes a dataset of temperature, precipitation, and associated biome. 

```{r}
data("Whittaker_biomes")
head(Whittaker_biomes)
unique(Whittaker_biomes$biome)
```

Get mean values of annual precipitation (P_F) and temperature (TA_F) for each site, and convert precipitation to match Whittaker dataset units (mm/yr to cm/yr). 

```{r}
whittaker_format <- fluxnet_annual %>%
  group_by(site) %>%
  summarize(mean_precip = mean(P_F), mean_temp = mean(TA_F)) %>%
  mutate(mean_precip_cm = conv_unit(mean_precip, "mm", "cm")) %>%
  left_join(site_metadata, by = c("site" = "SITE_ID"))
```

Show mean annual precipitation and temperature of each site over Whittaker biome. 

```{r}
#| code-fold: true

ggplot() +
  geom_polygon(
    data = Whittaker_biomes,
    aes(x = temp_c, y = precp_cm, fill = biome),
    # fill = "white"
    alpha = 0.4
  ) +
  # scale_fill_brewer(palette = "BrBG") +
  scale_fill_manual(
    name = "Whittaker biomes",
    breaks = names(Ricklefs_colors),
    labels = names(Ricklefs_colors),
    values = Ricklefs_colors
  ) +
  # new_scale_color() +
  geom_point(
    data = whittaker_format,
    aes(x = mean_temp, y = mean_precip_cm, color = IGBP)
  ) +
  scale_color_brewer(palette = "Set1") +
  labs(x = "Temperature (C)", y = "Precipitation (cm y-1)")
```

::: {.callout-tip}
## Questions

1. What to do with the plot colors? We could match IGBP colors to biome colors. Or make the biome colors represent their type, e.g., tan for desert, green for rain forest. Or turn the biome types into labels like the original figure. Lots of options here...
:::

### Daily energy flux (single site)

Textbook figure: 

![](textbook_figures/daily_energy_flux.png)

The energy flux variables are listed below. The ones that have multiple possible options are discussed below in the questions section. 

- NETRAD: Net radiation
- SW_IN_F: Shortwave radiation, incoming consolidated from SW_IN_F_MDS and SW_IN_ERA (negative values set to zero)
- SW_OUT: Shortwave radiation, outgoing
- LW_IN_F: Longwave radiation, incoming, consolidated from LW_IN_F_MDS and LW_IN_ERA
- LW_OUT: Longwave radiation, outgoing

Parsing dates and times: 

```{r}
#| eval: false

#not working currently
rad_dt <- single_site_hourly %>%
  mutate(
    date = date(datetime_start),
    time = format(as.POSIXct(datetime_start), format = '%H:%M')
  )
```

Show average half-hourly shortwave, longwave, and total radiation for a single site. Data collection starts `min(rad_dt$date)` and ends `max(rad_dt$date)`. 

```{r}
#| code-fold: true
#| eval: false

rad_means <- rad_dt %>%
  group_by(time) %>%
  summarise(
    rn_mean = mean(NETRAD),
    sw_in_mean = mean(SW_IN_F),
    sw_out_mean = mean(SW_OUT),
    lw_in_mean = mean(LW_IN_F),
    lw_out_mean = mean(LW_OUT)
  ) %>%
  pivot_longer(
    !time,
    names_to = "energy_flux_var",
    values_to = "energy_flux_value"
  ) %>%
  mutate(
    energy_flux_var = factor(
      energy_flux_var,
      levels = c(
        "rn_mean",
        "sw_in_mean",
        "sw_out_mean",
        "lw_in_mean",
        "lw_out_mean"
      )
    )
  )

ggplot(rad_means, aes(x = time, y = energy_flux_value)) +
  geom_line(aes(group = energy_flux_var, linetype = energy_flux_var)) +
  geom_hline(yintercept = 0) +
  #geom_point() +
  labs(x = "Time (hr)", y = "Energy flux (W m-2)") +
  theme_minimal() +
  scale_x_discrete(
    breaks = c("00:00", "04:00", "08:00", "12:00", "16:00", "20:00")
  ) +
  scale_linetype_manual(
    values = c("solid", "dotted", "dotted", "dashed", "dashed")
  )

```

::: {.callout-tip}
## Questions

1. Why does this not really line up with the textbook image? *Because this is real data. We will investigate more later*
2. There are a few options for shortwave in besides SW_IN_F: SW_IN_POT, SW_IN_F_MDS, SW_IN_ERA. Which of these is the one we want? *Yes*
3. Longwave in also has those options, plus JSB ones. *Also yes*
4. Add standard deviation to these means? 
:::

Textbook figure for APAR vs GPP for two sites: 

![](textbook_figures/apar.png)

Show photosynthetically active radiation to GPP. 

::: {.callout-tip}
# Question

**Which dataset is APAR in?** It's listed in the [data variables page](https://fluxnet.org/data/aboutdata/data-variables/), but not on the [fullset page](https://fluxnet.org/data/fluxnet2015-dataset/fullset-data-product/) or in the single site hourly, daily, or annual datasets. Other **MET_RAD** variables like SW/LW radiation and photon flux density are in those datsets. Also not in BADM. 
:::