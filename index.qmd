
---
title: "FLUXNET Demo Plots (with Global Maps)"
authors:
  - name: Dave Moore
  - name: Eric R. Scott
    orcid: 0000-0002-7430-7879
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
execute:
  freeze: auto
  echo: true
  warning: false
  message: true
params:
  save_figs: false
  use_terra: true
  data_dir_amf: "data/FLUXNET/AMF"
  data_dir_icos: "data/FLUXNET/ICOS"
  worldclim_rds: "data/wc_worldclim_30s.rds"
---

# Setup

```{r}
#| label: setup
#| include: true

library(here)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readr)
library(purrr)
library(stringr)
library(units)
library(ggnewscale)

# Extra packages needed for Eric's maps
suppressPackageStartupMessages({
  library(sf)
  library(ggtext)
  library(patchwork)
  library(colorspace)
  library(cols4all)
  library(rnaturalearth)
})

set.seed(123)

if (!params$use_terra) {
  suppressPackageStartupMessages(library(raster))
} else {
  suppressPackageStartupMessages(library(terra))
}

library(plotbiomes)

# Prevent namespace conflicts with 'raster'
select <- dplyr::select
filter <- dplyr::filter
lag    <- dplyr::lag

# Project helpers
source("R/fcn_utility_FLUXNET.R")
source("R/fcn_plot_FLUXNET.R")

# Figure dir + helper
fig_dir <- here::here("figs")
if (!dir.exists(fig_dir)) dir.create(fig_dir, recursive = TRUE)

save_if <- function(p, name, width = 7, height = 5, dpi = 300) {
  if (isTRUE(params$save_figs)) {
    ggsave(file.path(fig_dir, paste0(name, ".png")), p, width = width, height = height, dpi = dpi)
  }
  p
}
```

# Load metadata

```{r}
#| label: metadata

metadata <- load_fluxnet_metadata()

# Ensure 'site' column exists for joins
if (!"site" %in% names(metadata)) {
  if ("SITE_ID" %in% names(metadata)) metadata <- dplyr::rename(metadata, site = SITE_ID)
  if ("SITEID"  %in% names(metadata)) metadata <- dplyr::rename(metadata, site = SITEID)
}

md_join <- metadata %>% dplyr::select(-any_of(c("SITE_ID","SITEID")))
```

# Discover files and build manifest

```{r}
#| label: manifest

amf_files  <- discover_AMF_files(data_dir = here::here(params$data_dir_amf))
icos_files <- discover_ICOS_files(data_dir = here::here(params$data_dir_icos))

manifest <- dplyr::bind_rows(amf_files, icos_files) %>%
  dplyr::distinct(site, data_product, dataset, time_integral, start_year, end_year, .keep_all = TRUE)

manifest %>% dplyr::count(dataset, time_integral)
```

# Load annual FULLSET and join metadata

```{r}
#| label: annual-data

annual_data <- manifest %>%
  dplyr::filter(time_integral == "YY", dataset == "FULLSET") %>%
  load_fluxnet_data() %>%
  dplyr::mutate(across(where(is.numeric), ~na_if(.x, -9999))) %>%
  dplyr::mutate(year = as.integer(TIMESTAMP), .before = TIMESTAMP) %>%
  dplyr::left_join(md_join, by = "site")

unique(annual_data$site)
```

# Global maps (Eric)

```{r}
#| label: eric-standardize-vars
# Standardize flux column names to a common set so the map code is agnostic
pick_first <- function(cands, nms) {
  hit <- cands[cands %in% nms]
  if (length(hit) == 0) NA_character_ else hit[1]
}

nm <- names(annual_data)
col_NEE  <- pick_first(c("NEE_VUT_MEAN",   "NEE_VUT_REF"),    nm)
col_GPP  <- pick_first(c("GPP_NT_VUT_MEAN","GPP_NT_VUT_REF"), nm)
col_RECO <- pick_first(c("RECO_NT_VUT_MEAN","RECO_NT_VUT_REF"), nm)

missing <- c(
  if (is.na(col_NEE))  "NEE (VUT_MEAN or VUT_REF)"  else NULL,
  if (is.na(col_GPP))  "GPP (NT_VUT_MEAN or NT_VUT_REF)" else NULL,
  if (is.na(col_RECO)) "RECO (NT_VUT_MEAN or NT_VUT_REF)" else NULL
)
if (length(missing) > 0) {
  stop("Missing required flux columns in annual_data: ", paste(missing, collapse = ", "))
}

annual_std <- annual_data %>%
  dplyr::rename(
    NEE_VUT_MEAN     = dplyr::all_of(col_NEE),
    GPP_NT_VUT_MEAN  = dplyr::all_of(col_GPP),
    RECO_NT_VUT_MEAN = dplyr::all_of(col_RECO)
  )

vars_of_interest <- c("GPP_NT_VUT_MEAN","NEE_VUT_MEAN","RECO_NT_VUT_MEAN")
```

## Site map by record length

```{r}
#| label: eric-site-map
#| fig-cap: "Sites colored by number of years of data; main panel plus focus on Europe and North America."
#| fig-width: 10
#| fig-height: 8

world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") |>
  dplyr::filter(continent != "Antarctica")

site_yrs <- annual_std |>
  dplyr::group_by(site) |>
  dplyr::summarize(n_yrs = dplyr::n_distinct(year), .groups = "drop") |>
  dplyr::left_join(metadata, dplyr::join_by(site)) |>
  dplyr::filter(!is.na(LOCATION_LONG), !is.na(LOCATION_LAT)) |>
  sf::st_as_sf(coords = c("LOCATION_LONG","LOCATION_LAT"), crs = 4326)

# BBoxes from sites (avoid typos like 'Portugul')
bbox_na <- site_yrs |>
  dplyr::filter(COUNTRY %in% c("USA","United States of America","Canada","Mexico","Panama","Costa Rica")) |>
  sf::st_bbox()

bbox_eu <- site_yrs |>
  dplyr::filter(COUNTRY %in% c(
    "Belgium","Switzerland","Czechia","Germany","Denmark","Spain","Finland",
    "France","Italy","Netherlands","Norway","Portugal","Sweden","United Kingdom",
    "UK","Ireland","Austria","Poland"
  )) |>
  sf::st_bbox()

base <- ggplot() +
  geom_sf(data = world, fill = "white") +
  geom_sf(data = site_yrs, aes(color = n_yrs), size = 0.5) +
  scale_color_continuous_sequential(palette = "Viridis", rev = FALSE, end = 0.9) +
  theme_void() +
  theme(panel.background = element_rect(fill = "lightblue", color = "black"))

p_world <- base + coord_sf(expand = FALSE)
p_na    <- base + coord_sf(xlim = c(bbox_na["xmin"], bbox_na["xmax"]),
                           ylim = c(bbox_na["ymin"], bbox_na["ymax"]))
p_eu    <- base + coord_sf(xlim = c(bbox_eu["xmin"], bbox_eu["xmax"]),
                           ylim = c(bbox_eu["ymin"], bbox_eu["ymax"]))

p_site_years <- p_world / (p_eu | p_na) +
  patchwork::plot_layout(widths = c(1, 0.4, 0.6), guides = "collect") &
  labs(color = "# yrs")

save_if(p_site_years, "eric_n_yrs_site_map", width = 10, height = 8)
p_site_years
```

## Site map by IGBP

```{r}
#| label: eric-site-map-igbp
#| fig-cap: "Sites colored by IGBP class; main panel plus focus on Europe and North America."
#| fig-width: 10
#| fig-height: 8

metadata_sf <- metadata |>
  dplyr::filter(!is.na(LOCATION_LONG), !is.na(LOCATION_LAT)) |>
  sf::st_as_sf(coords = c("LOCATION_LONG","LOCATION_LAT"), crs = 4326)

base2 <- ggplot() +
  geom_sf(data = world, fill = "white") +
  geom_sf(data = metadata_sf, aes(color = IGBP), size = 0.5, key_glyph = "rect") +
  scale_color_discrete_qualitative() +
  theme_void() +
  theme(panel.background = element_rect(fill = "lightblue", color = "black"))

p_world2 <- base2 + coord_sf(expand = FALSE)
p_na2    <- base2 + coord_sf(xlim = c(bbox_na["xmin"], bbox_na["xmax"]),
                             ylim = c(bbox_na["ymin"], bbox_na["ymax"]))
p_eu2    <- base2 + coord_sf(xlim = c(bbox_eu["xmin"], bbox_eu["xmax"]),
                             ylim = c(bbox_eu["ymin"], bbox_eu["ymax"]))

p_igbp <- p_world2 / (p_eu2 | p_na2) +
  patchwork::plot_layout(widths = c(1, 0.4, 0.6), guides = "collect") &
  labs(color = "IGBP")

save_if(p_igbp, "eric_igbp_site_map", width = 10, height = 8)
p_igbp
```

## Current vs historical flux maps

```{r}
#| label: eric-flux-map-build
#| message: false
#| warning: false

annual_hist <- annual_std |>
  dplyr::select(site, year, dplyr::all_of(vars_of_interest)) |>
  dplyr::filter(year < max(year, na.rm = TRUE)) |>
  dplyr::summarize(dplyr::across(dplyr::all_of(vars_of_interest), ~mean(.x, na.rm = TRUE)),
                   .by = site)

annual_curr <- annual_std |>
  dplyr::select(site, year, dplyr::all_of(vars_of_interest)) |>
  dplyr::filter(year == max(year, na.rm = TRUE)) |>
  dplyr::summarize(dplyr::across(dplyr::all_of(vars_of_interest), ~mean(.x, na.rm = TRUE)),
                   .by = site)

plot_df <- dplyr::bind_rows(
  dplyr::mutate(annual_hist, period = "hist"),
  dplyr::mutate(annual_curr, period = "curr")
) |>
  tidyr::pivot_longer(c(-site, -period)) |>
  tidyr::pivot_wider(names_from = period, values_from = value) |>
  dplyr::mutate(diff = curr - hist) |>
  tidyr::pivot_wider(names_from = name, values_from = c(hist, curr, diff)) |>
  dplyr::left_join(metadata |> dplyr::select(site, LOCATION_LAT, LOCATION_LONG), dplyr::join_by(site)) |>
  dplyr::filter(is.finite(LOCATION_LONG), is.finite(LOCATION_LAT)) |>
  sf::st_as_sf(coords = c("LOCATION_LONG","LOCATION_LAT"), crs = 4326)

make_pair <- function(var){
  lab <- stringr::str_extract(var, "GPP|NEE|RECO")
  var_hist <- paste0("hist_", var)
  var_diff <- paste0("diff_", var)

  p1 <- plot_df |>
    dplyr::filter(dplyr::if_all(dplyr::all_of(var_hist), is.finite)) |>
    ggplot() +
    geom_sf(data = world, fill = "white") +
    geom_sf(aes(color = .data[[var_hist]]), size = 0.4, na.rm = TRUE) +
    labs(color = paste0(lab, " gC m<sup>-2</sup> y<sup>-1</sup>")) +
    coord_sf(expand = FALSE) +
    theme_void() +
    theme(legend.title = ggtext::element_markdown(),
          legend.position = "bottom",
          legend.key.width = grid::unit(1, "null"),
          panel.background = element_rect(fill = "lightblue", color = "black"))

  if (lab == "NEE") {
    p1 <- p1 + cols4all::scale_color_continuous_c4a_div("met.troy")
  } else {
    p1 <- p1 + scale_color_continuous_sequential(palette = "Viridis")
  }

  p2 <- plot_df |>
    dplyr::filter(dplyr::if_all(dplyr::all_of(var_diff), is.finite)) |>
    ggplot() +
    geom_sf(data = world, fill = "white") +
    geom_sf(aes(color = .data[[var_diff]]), size = 0.4, na.rm = TRUE) +
    scale_color_continuous_diverging() +
    labs(color = paste0(lab, " gC m<sup>-2</sup> y<sup>-1</sup>")) +
    coord_sf(expand = FALSE) +
    theme_void() +
    theme(legend.title = ggtext::element_markdown(),
          legend.position = "bottom",
          legend.key.width = grid::unit(1, "null"),
          panel.background = element_rect(fill = "lightblue", color = "black"))

  p1 | p2
}

p_list <- lapply(vars_of_interest, make_pair)
p_fluxmaps <- patchwork::wrap_plots(p_list, ncol = 1) + patchwork::plot_annotation(tag_levels = "a")
```

```{r}
#| label: eric-flux-map-fig
#| fig-cap: "Fluxes averaged over all prior years (left in each row) and the current year minus prior mean (right)."
#| fig-width: 10
#| fig-height: 8
save_if(p_fluxmaps, "eric_flux_maps", width = 10, height = 8)
p_fluxmaps
```

# IGBP aggregated flux summaries

```{r}
#| label: plot-igbp-nee
p_igbp_nee  <- plot_flux_by_igbp(annual_data, "NEE_VUT_REF")$composite_plot
save_if(p_igbp_nee, "igbp_nee")
```

```{r}
#| label: plot-igbp-gpp
p_igbp_gpp  <- plot_flux_by_igbp(annual_data, "GPP_NT_VUT_REF")$composite_plot
save_if(p_igbp_gpp, "igbp_gpp")
```

```{r}
#| label: plot-igbp-reco
p_igbp_reco <- plot_flux_by_igbp(annual_data, "RECO_NT_VUT_REF")$composite_plot
save_if(p_igbp_reco, "igbp_reco")
```

# Time-sliced comparison (5-yr bins)

```{r}
#| label: timeslice-nee
p_timeslice <- plot_flux_by_igbp_timeslice_grouped(annual_data, flux_var = "NEE_VUT_REF")$flux_plot
save_if(p_timeslice, "timeslice_nee")
```

# Interannual boxplots by IGBP groups

```{r}
#| label: grouped-boxplots
boxplots <- plot_flux_box_by_group(annual_data, flux_var = "RECO_NT_VUT_REF", y_mode = "squish")
save_if(boxplots$Forest,        "box_forest")
save_if(boxplots$ShrubOpens,    "box_shrubopens")
save_if(boxplots$GrassCropsWet, "box_grasscropswet")
```

# Median time series by IGBP

```{r}
#| label: ts-nee
save_if(plot_flux_timeseries_by_igbp(annual_data, "NEE_VUT_REF"), "ts_nee")
```

```{r}
#| label: ts-gpp
save_if(plot_flux_timeseries_by_igbp(annual_data, "GPP_NT_VUT_REF"), "ts_gpp")
```

```{r}
#| label: ts-reco
save_if(plot_flux_timeseries_by_igbp(annual_data, "RECO_NT_VUT_REF"), "ts_reco")
```

```{r}
#| label: ts-wue
save_if(plot_flux_timeseries_by_igbp(annual_data, "WUE"), "ts_wue")
```

# Latitudinal summaries

```{r}
#| label: latitudinal
save_if(plot_latitudinal_flux(annual_data, metadata, "NEE_VUT_REF"),     "lat_nee")
save_if(plot_latitudinal_flux(annual_data, metadata, "GPP_NT_VUT_REF"),  "lat_gpp")
save_if(plot_latitudinal_flux(annual_data, metadata, "RECO_NT_VUT_REF"), "lat_reco")
```

# Climate vs Flux quicklooks

```{r}
#| label: climate-xy
cp <- plot_annual_fluxnet_data(annual_data)
save_if(cp$precip_vs_nee, "precip_vs_nee")
save_if(cp$temp_vs_gpp,   "temp_vs_gpp")

save_if(PlotXY_annual(annual_data, "GPP_NT_VUT_REF", "LE_F_MDS"), "xy_gpp_le")
save_if(PlotXY_annual(annual_data, "NEE_VUT_REF",     "LE_F_MDS"), "xy_nee_le")
```

# Site-level climate & flux summaries (tower)

```{r}
#| label: site-summaries
climate_summary <- annual_data %>%
  dplyr::group_by(site) %>%
  dplyr::summarize(
    mean_precip = mean(P_F, na.rm = TRUE),       # mm/yr (tower)
    mean_temp   = mean(TA_F, na.rm = TRUE),      # °C (tower)
    mean_GPP    = mean(GPP_NT_VUT_REF, na.rm = TRUE),
    mean_NEE    = mean(NEE_VUT_REF, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  dplyr::mutate(
    mean_precip_cm = set_units(mean_precip, "mm") |> set_units("cm"),  # mm → cm
    NEE_sign = ifelse(mean_NEE < 0, "Sink (NEE < 0)", "Source (NEE ≥ 0)")
  ) %>%
  dplyr::left_join(metadata, by = "site")

head(climate_summary)
```

# WorldClim extraction at tower locations

```{r}
#| label: worldclim-extract
wc <- readRDS(here::here(params$worldclim_rds))

# --- Choose lat/lon columns and drop NAs before extraction ---
lon_candidates <- c("LOCATION_LONG","LONGITUDE","Longitude","lon","Lon","LON")
lat_candidates <- c("LOCATION_LAT","LATITUDE","Latitude","lat","Lat","LAT")

lon_col <- lon_candidates[lon_candidates %in% names(climate_summary)][1]
lat_col <- lat_candidates[lat_candidates %in% names(climate_summary)][1]

if (is.na(lon_col) || is.na(lat_col)) {
  stop("Could not find longitude/latitude columns in climate_summary. ",
       "Looked for: ", paste(lon_candidates, collapse=", "), " / ",
       paste(lat_candidates, collapse=", "))
}

cs_coords <- climate_summary %>%
  dplyr::rename(LON = !!lon_col, LAT = !!lat_col) %>%
  dplyr::filter(is.finite(LON), is.finite(LAT))

n_dropped <- nrow(climate_summary) - nrow(cs_coords)
if (n_dropped > 0) message("WorldClim extraction: dropped ", n_dropped, " site(s) with missing/invalid coordinates.")

# Decide extraction engine: use terra if requested OR if object is a SpatRaster
use_terra_extraction <- isTRUE(params$use_terra) || inherits(wc, "SpatRaster")

if (use_terra_extraction) {
  # --- terra path ---
  if (!requireNamespace("terra", quietly = TRUE)) {
    stop("terra is required for SpatRaster extraction. Install with install.packages('terra') ",
         "or set params$use_terra: false and provide a RasterStack/Brick.")
  }
  site_pts <- terra::vect(
    cs_coords,
    geom = c("LON", "LAT"),
    crs  = "EPSG:4326"
  )
  wc_vals <- terra::extract(wc, site_pts)
  names(wc_vals) <- make.names(names(wc_vals))
  cs_coords$MAT_WorldClim <- wc_vals[[grep("bio_1", names(wc_vals))[1]]]
  cs_coords$MAP_WorldClim <- wc_vals[[grep("bio_12", names(wc_vals))[1]]]
} else {
  # --- raster fallback ---
  if (inherits(wc, "SpatRaster")) {
    wc_try <- try(suppressWarnings(raster::stack(wc)), silent = TRUE)
    if (inherits(wc_try, "try-error")) {
      wc_try <- try(suppressWarnings(as(wc, "Raster")), silent = TRUE)
    }
    if (inherits(wc_try, "try-error")) {
      stop("Could not coerce SpatRaster -> Raster for raster::extract. ",
           "Set params$use_terra: true to use terra extraction.")
    }
    wc <- wc_try
  }
  sp_pts <- sp::SpatialPoints(
    coords = cs_coords[,c("LON","LAT")],
    proj4string = sp::CRS("+proj=longlat +datum=WGS84 +no_defs")
  )
  wc_vals <- raster::extract(wc, sp_pts)
  nm <- colnames(wc_vals)
  mat_col <- nm[grepl("bio_1", nm)]
  map_col <- nm[grepl("bio_12", nm)]
  cs_coords$MAT_WorldClim <- wc_vals[, mat_col][,1]
  cs_coords$MAP_WorldClim <- wc_vals[, map_col][,1]
}

# Merge extracted values back into full climate_summary (by site)
if (!all(c("site") %in% names(cs_coords))) {
  cs_coords$site <- climate_summary$site[match(rownames(cs_coords), rownames(climate_summary))]
}
climate_summary <- climate_summary %>%
  dplyr::select(-dplyr::any_of(c("MAT_WorldClim","MAP_WorldClim"))) %>%
  dplyr::left_join(cs_coords %>% dplyr::select(site, MAT_WorldClim, MAP_WorldClim), by = "site")

# Convert to Whittaker axes
climate_summary <- climate_summary %>%
  dplyr::mutate(
    MAT_WorldClim_C  = MAT_WorldClim ,  # °C
    MAP_WorldClim_cm = MAP_WorldClim / 10   # mm → cm
  )
```

# Tower vs WorldClim checks

```{r}
#| label: wc-checks
p_wc_mat <- ggplot(climate_summary, aes(x = MAT_WorldClim_C, y = mean_temp)) +
  geom_point(size = 2.5, alpha = 0.8) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
  labs(x = "WorldClim MAT (°C)", y = "Observed Site MAT (°C)") +
  theme_classic()
save_if(p_wc_mat, "wc_vs_site_mat")

p_wc_map <- ggplot(climate_summary, aes(x = MAP_WorldClim, y = mean_precip)) +
  geom_point(size = 2.5, alpha = 0.8) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
  labs(x = "WorldClim MAP (mm)", y = "Observed Site MAP (mm)") +
  theme_classic()
save_if(p_wc_map, "wc_vs_site_map")
```

# Whittaker biomes with site overlays

```{r}
#| label: whittaker

data("Whittaker_biomes", package = "plotbiomes")

my_15_colors <- c(
  "#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e",
  "#e6ab02", "#a6761d", "#666666", "#1f78b4", "#b2df8a",
  "#fb9a99", "#fdbf6f", "#cab2d6", "#ffff99", "#8dd3c7"
)

p_whittaker <- ggplot() +
  geom_polygon(
    data = Whittaker_biomes,
    aes(x = temp_c, y = precp_cm, group = biome, fill = biome),
    color = "grey80", alpha = 0.4
  ) +
  scale_fill_brewer(palette = "BrBG", name = "Biome") +
  ggnewscale::new_scale_fill() +
  geom_point(
    data = climate_summary,
    aes(x = MAT_WorldClim_C, y = MAP_WorldClim_cm, color = IGBP),
    size = 2.8, alpha = 0.9
  ) +
  scale_color_manual(values = my_15_colors, drop = FALSE, name = "IGBP") +
  labs(x = "Temperature (°C)", y = "Precipitation (cm yr\u207B\u00B9)") +
  theme_classic()
save_if(p_whittaker, "whittaker_igbp")

p_whittaker_nee <- ggplot() +
  geom_polygon(
    data = Whittaker_biomes,
    aes(x = temp_c, y = precp_cm, group = biome, fill = biome),
    color = "grey80", alpha = 0.4
  ) +
  scale_fill_brewer(palette = "BrBG", name = "Biome") +
  ggnewscale::new_scale_fill() +
  geom_point(
    data = climate_summary,
    aes(x = MAT_WorldClim_C, y = MAP_WorldClim_cm,
        size = abs(mean_NEE), fill = NEE_sign),
    shape = 21, color = "black", alpha = 0.9
  ) +
  scale_fill_manual(
    values = c("Sink (NEE < 0)" = "#1b9e77",
               "Source (NEE ≥ 0)" = "#d95f02"),
    name = "NEE Sign"
  ) +
  scale_size_continuous(name = "|NEE|", range = c(1, 8)) +
  labs(x = "Temperature (°C)", y = "Precipitation (cm yr\u207B\u00B9)") +
  theme_classic()
save_if(p_whittaker_nee, "whittaker_nee")
```
